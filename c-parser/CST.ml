(* Generated by ocaml-tree-sitter. *)
(*
   c grammar

   entrypoint: translation_unit
*)

open! Sexplib.Conv
open Tree_sitter_run

type imm_tok_pat_509ec78 = Token.t (* pattern \r?\n *)

type preproc_directive = Token.t (* pattern #[ \t]*[a-zA-Z0-9]\w* *)

type system_lib_string = Token.t

type escape_sequence = Token.t

type false_ = Token.t

type primitive_type = Token.t

type pat_c46d1b2 = Token.t (* pattern #[ 	]*endif *)

type anon_choice_BANG_67174d6 = [
    `BANG of Token.t (* "!" *)
  | `TILDE of Token.t (* "~" *)
  | `DASH of Token.t (* "-" *)
  | `PLUS of Token.t (* "+" *)
]

type imm_tok_lpar = Token.t (* "(" *)

type imm_tok_pat_36637e2 = Token.t (* pattern "[^\\n']" *)

type imm_tok_prec_p1_pat_c7f65b4 = Token.t (* pattern "[^\\\\\"\\n]+" *)

type break_statement = (Token.t (* "break" *) * Token.t (* ";" *))

type continue_statement = (Token.t (* "continue" *) * Token.t (* ";" *))

type ms_unaligned_ptr_modifier = [
    `X__unal of Token.t (* "_unaligned" *)
  | `X___unal of Token.t (* "__unaligned" *)
]

type pat_56631e5 = Token.t (* pattern #[ 	]*else *)

type true_ = Token.t

type storage_class_specifier = [
    `Extern of Token.t (* "extern" *)
  | `Static of Token.t (* "static" *)
  | `Auto of Token.t (* "auto" *)
  | `Regi of Token.t (* "register" *)
  | `Inline of Token.t (* "inline" *)
  | `X___inline of Token.t (* "__inline" *)
  | `X___inline__ of Token.t (* "__inline__" *)
  | `X___forc of Token.t (* "__forceinline" *)
  | `Thread_local of Token.t (* "thread_local" *)
  | `X___thread of Token.t (* "__thread" *)
]

type ms_call_modifier = [
    `X___cdecl of Token.t (* "__cdecl" *)
  | `X___clrc of Token.t (* "__clrcall" *)
  | `X___stdc of Token.t (* "__stdcall" *)
  | `X___fast of Token.t (* "__fastcall" *)
  | `X___this of Token.t (* "__thiscall" *)
  | `X___vect of Token.t (* "__vectorcall" *)
]

type pat_25b90ba = Token.t (* pattern #[ 	]*ifdef *)

type null = [
    `NULL of Token.t (* "NULL" *)
  | `Null of Token.t (* "nullptr" *)
]

type identifier =
  Token.t (* pattern (\p{XID_Start}|\$|_|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})(\p{XID_Continue}|\$|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8})* *)

type preproc_arg = Token.t

type pat_c3ea183 = Token.t (* pattern #[ 	]*define *)

type anon_choice_signed_a0bfc19 = [
    `Signed of Token.t (* "signed" *)
  | `Unsi of Token.t (* "unsigned" *)
  | `Long of Token.t (* "long" *)
  | `Short of Token.t (* "short" *)
]

type pat_0307ca2 = Token.t (* pattern #[ 	]*elifdef *)

type pat_9d92f6a = Token.t (* pattern #[ 	]*ifndef *)

type pat_a6d4183 = Token.t (* pattern #[ 	]*elifndef *)

type pat_ca8830e = Token.t (* pattern #[ 	]*include *)

type pat_3df6e71 = Token.t (* pattern #[ 	]*if *)

type number_literal = Token.t

type pat_bfeb4bb = Token.t (* pattern #[ 	]*elif *)

type anon_choice_DASHDASH_d11def2 = [
    `DASHDASH of Token.t (* "--" *)
  | `PLUSPLUS of Token.t (* "++" *)
]

type gnu_asm_qualifier = [
    `Vola of Token.t (* "volatile" *)
  | `X___vola__ of Token.t (* "__volatile__" *)
  | `Inline of Token.t (* "inline" *)
  | `Goto of Token.t (* "goto" *)
]

type char_literal = (
    [
        `LSQUOT of Token.t (* "L'" *)
      | `USQUOT_d861d39 of Token.t (* "u'" *)
      | `USQUOT_2701bdc of Token.t (* "U'" *)
      | `U8SQUOT of Token.t (* "u8'" *)
      | `SQUOT of Token.t (* "'" *)
    ]
  * [
        `Esc_seq of escape_sequence (*tok*)
      | `Imm_tok_pat_36637e2 of imm_tok_pat_36637e2
    ]
      list (* one or more *)
  * Token.t (* "'" *)
)

type string_literal = (
    [
        `LDQUOT of Token.t (* "L\"" *)
      | `UDQUOT_c163aae of Token.t (* "u\"" *)
      | `UDQUOT_df3447d of Token.t (* "U\"" *)
      | `U8DQUOT of Token.t (* "u8\"" *)
      | `DQUOT of Token.t (* "\"" *)
    ]
  * [
        `Imm_tok_prec_p1_pat_c7f65b4 of imm_tok_prec_p1_pat_c7f65b4
      | `Esc_seq of escape_sequence (*tok*)
    ]
      list (* zero or more *)
  * Token.t (* "\"" *)
)

type preproc_call = (
    preproc_directive (*tok*)
  * preproc_arg (*tok*) option
  * imm_tok_pat_509ec78
)

type ms_pointer_modifier = [
    `Ms_unal_ptr_modi of ms_unaligned_ptr_modifier
  | `Ms_rest_modi of Token.t (* "__restrict" *)
  | `Ms_unsi_ptr_modi of Token.t (* "__uptr" *)
  | `Ms_signed_ptr_modi of Token.t (* "__sptr" *)
]

type anon_choice_pat_25b90ba_4a37f8c = [
    `Pat_25b90ba of pat_25b90ba
  | `Pat_9d92f6a of pat_9d92f6a
]

type anon_choice_pat_0307ca2_dbf6a9d = [
    `Pat_0307ca2 of pat_0307ca2
  | `Pat_a6d4183 of pat_a6d4183
]

type preproc_def = (
    pat_c3ea183
  * identifier (*tok*)
  * preproc_arg (*tok*) option
  * imm_tok_pat_509ec78
)

type anon_choice_stmt_id_fe6e1ce = [
    `Id of identifier (*tok*)
  | `Vari_param of Token.t (* "..." *)
]

type field_designator = (Token.t (* "." *) * identifier (*tok*))

type goto_statement = (
    Token.t (* "goto" *) * identifier (*tok*) * Token.t (* ";" *)
)

type preproc_defined = [
    `Defi_LPAR_id_RPAR of (
        Token.t (* "defined" *) * Token.t (* "(" *) * identifier (*tok*)
      * Token.t (* ")" *)
    )
  | `Defi_id of (Token.t (* "defined" *) * identifier (*tok*))
]

type gnu_asm_goto_list = (
    Token.t (* ":" *)
  * (
        identifier (*tok*)
      * (Token.t (* "," *) * identifier (*tok*)) list (* zero or more *)
    )
      option
)

type anon_choice_stmt_id_1a79fc3 = [
    `Id of identifier (*tok*)
  | `Prim_type of primitive_type (*tok*)
]

type ms_declspec_modifier = (
    Token.t (* "__declspec" *) * Token.t (* "(" *) * identifier (*tok*)
  * Token.t (* ")" *)
)

type anon_choice_stmt_id_d3c4b5f = [
    `Id of identifier (*tok*)
  | `DOTDOTDOT of Token.t (* "..." *)
]

type string_ = [
    `Str_lit of string_literal
  | `Conc_str of (
        [
            `Id_str_lit of (identifier (*tok*) * string_literal)
          | `Str_lit_str_lit of (string_literal * string_literal)
          | `Str_lit_id of (string_literal * identifier (*tok*))
        ]
      * [ `Str_lit of string_literal | `Id of identifier (*tok*) ]
          list (* zero or more *)
    )
]

type old_style_parameter_list = (
    Token.t (* "(" *)
  * (
        anon_choice_stmt_id_fe6e1ce
      * (Token.t (* "," *) * anon_choice_stmt_id_fe6e1ce)
          list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

type preproc_argument_list = (
    Token.t (* "(" *)
  * (
        preproc_expression
      * (Token.t (* "," *) * preproc_expression) list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

and preproc_binary_expression = [
    `Prep_exp_PLUS_prep_exp of (
        preproc_expression * Token.t (* "+" *) * preproc_expression
    )
  | `Prep_exp_DASH_prep_exp of (
        preproc_expression * Token.t (* "-" *) * preproc_expression
    )
  | `Prep_exp_STAR_prep_exp of (
        preproc_expression * Token.t (* "*" *) * preproc_expression
    )
  | `Prep_exp_SLASH_prep_exp of (
        preproc_expression * Token.t (* "/" *) * preproc_expression
    )
  | `Prep_exp_PERC_prep_exp of (
        preproc_expression * Token.t (* "%" *) * preproc_expression
    )
  | `Prep_exp_BARBAR_prep_exp of (
        preproc_expression * Token.t (* "||" *) * preproc_expression
    )
  | `Prep_exp_AMPAMP_prep_exp of (
        preproc_expression * Token.t (* "&&" *) * preproc_expression
    )
  | `Prep_exp_BAR_prep_exp of (
        preproc_expression * Token.t (* "|" *) * preproc_expression
    )
  | `Prep_exp_HAT_prep_exp of (
        preproc_expression * Token.t (* "^" *) * preproc_expression
    )
  | `Prep_exp_AMP_prep_exp of (
        preproc_expression * Token.t (* "&" *) * preproc_expression
    )
  | `Prep_exp_EQEQ_prep_exp of (
        preproc_expression * Token.t (* "==" *) * preproc_expression
    )
  | `Prep_exp_BANGEQ_prep_exp of (
        preproc_expression * Token.t (* "!=" *) * preproc_expression
    )
  | `Prep_exp_GT_prep_exp of (
        preproc_expression * Token.t (* ">" *) * preproc_expression
    )
  | `Prep_exp_GTEQ_prep_exp of (
        preproc_expression * Token.t (* ">=" *) * preproc_expression
    )
  | `Prep_exp_LTEQ_prep_exp of (
        preproc_expression * Token.t (* "<=" *) * preproc_expression
    )
  | `Prep_exp_LT_prep_exp of (
        preproc_expression * Token.t (* "<" *) * preproc_expression
    )
  | `Prep_exp_LTLT_prep_exp of (
        preproc_expression * Token.t (* "<<" *) * preproc_expression
    )
  | `Prep_exp_GTGT_prep_exp of (
        preproc_expression * Token.t (* ">>" *) * preproc_expression
    )
]

and preproc_call_expression = (identifier (*tok*) * preproc_argument_list)

and preproc_expression = [
    `Id of identifier (*tok*)
  | `Prep_call_exp of preproc_call_expression
  | `Num_lit of number_literal (*tok*)
  | `Char_lit of char_literal
  | `Prep_defi of preproc_defined
  | `Prep_un_exp of (anon_choice_BANG_67174d6 * preproc_expression)
  | `Prep_bin_exp of preproc_binary_expression
  | `Prep_paren_exp of (
        Token.t (* "(" *) * preproc_expression * Token.t (* ")" *)
    )
]

type preproc_params = (
    imm_tok_lpar (*tok*)
  * (
        anon_choice_stmt_id_d3c4b5f
      * (Token.t (* "," *) * anon_choice_stmt_id_d3c4b5f)
          list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

type gnu_asm_clobber_list = (
    Token.t (* ":" *)
  * (string_ * (Token.t (* "," *) * string_) list (* zero or more *)) option
)

type preproc_include = (
    pat_ca8830e
  * [
        `Str_lit of string_literal
      | `System_lib_str of system_lib_string (*tok*)
      | `Id of identifier (*tok*)
      | `Prep_call_exp of preproc_call_expression
    ]
  * imm_tok_pat_509ec78
)

type preproc_function_def = (
    pat_c3ea183
  * identifier (*tok*)
  * preproc_params
  * preproc_arg (*tok*) option
  * imm_tok_pat_509ec78
)

type abstract_declarator = [
    `Abst_poin_decl of (
        Token.t (* "*" *)
      * ms_pointer_modifier list (* zero or more *)
      * type_qualifier list (* zero or more *)
      * abstract_declarator option
    )
  | `Abst_func_decl of (abstract_declarator option * parameter_list)
  | `Abst_array_decl of (
        abstract_declarator option
      * Token.t (* "[" *)
      * anon_choice_type_qual_b00a56a list (* zero or more *)
      * anon_choice_exp_508611b option
      * Token.t (* "]" *)
    )
  | `Abst_paren_decl of (
        Token.t (* "(" *)
      * ms_call_modifier option
      * abstract_declarator
      * Token.t (* ")" *)
    )
]

and anon_choice_exp_3078596 = [
    `Exp of expression
  | `Init_list of initializer_list
]

and anon_choice_exp_508611b = [
    `Exp of expression
  | `STAR of Token.t (* "*" *)
]

and anon_choice_exp_55b4dba = [
    `Exp of expression
  | `Comma_exp of comma_expression
]

and anon_choice_exp_f079e30 = [
    `Exp of expression
  | `Comp_stmt of compound_statement
]

and anon_choice_init_pair_1a6981e = [
    `Init_pair of initializer_pair
  | `Exp of expression
  | `Init_list of initializer_list
]

and anon_choice_opt_ms_call_modi_decl_decl_opt_gnu_asm_exp_2fa2f9e = [
    `Opt_ms_call_modi_decl_decl_opt_gnu_asm_exp of (
        ms_call_modifier option
      * declaration_declarator
      * gnu_asm_expression option
    )
  | `Init_decl of (
        declarator
      * Token.t (* "=" *)
      * [ `Init_list of initializer_list | `Exp of expression ]
    )
]

and anon_choice_param_decl_4ac2852 = [
    `Param_decl of (
        declaration_specifiers
      * [ `Decl of declarator | `Abst_decl of abstract_declarator ] option
      * attribute_specifier list (* zero or more *)
    )
  | `Vari_param of Token.t (* "..." *)
]

and anon_choice_prep_else_6b6e391 = [
    `Prep_else of (pat_56631e5 * block_item list (* zero or more *))
  | `Prep_elif_5b2d46e of (
        pat_bfeb4bb
      * preproc_expression
      * Token.t (* "\n" *)
      * block_item list (* zero or more *)
      * anon_choice_prep_else_6b6e391 option
    )
  | `Prep_elif_b56056c of (
        anon_choice_pat_0307ca2_dbf6a9d
      * identifier (*tok*)
      * block_item list (* zero or more *)
      * anon_choice_prep_else_6b6e391 option
    )
]

and anon_choice_prep_else_in_enum_list_a31466c = [
    `Prep_else_in_enum_list of (
        pat_56631e5
      * (enumerator * Token.t (* "," *)) list (* zero or more *)
    )
  | `Prep_elif_in_enum_list_1680e39 of (
        pat_bfeb4bb
      * preproc_expression
      * Token.t (* "\n" *)
      * (enumerator * Token.t (* "," *)) list (* zero or more *)
      * anon_choice_prep_else_in_enum_list_a31466c option
    )
  | `Prep_elif_in_enum_list_8fab4d0 of (
        anon_choice_pat_0307ca2_dbf6a9d
      * identifier (*tok*)
      * (enumerator * Token.t (* "," *)) list (* zero or more *)
      * anon_choice_prep_else_in_enum_list_a31466c option
    )
]

and anon_choice_prep_else_in_enum_list_no_comma_aaec454 = [
    `Prep_else_in_enum_list_no_comma of (
        pat_56631e5
      * enumerator list (* zero or more *)
    )
  | `Prep_elif_in_enum_list_no_comma_0776021 of (
        pat_bfeb4bb
      * preproc_expression
      * Token.t (* "\n" *)
      * enumerator list (* zero or more *)
      * anon_choice_prep_else_in_enum_list_no_comma_aaec454 option
    )
  | `Prep_elif_in_enum_list_no_comma_b3ccc22 of (
        anon_choice_pat_0307ca2_dbf6a9d
      * identifier (*tok*)
      * enumerator list (* zero or more *)
      * anon_choice_prep_else_in_enum_list_no_comma_aaec454 option
    )
]

and anon_choice_prep_else_in_field_decl_list_1fef6b2 = [
    `Prep_else_in_field_decl_list of (
        pat_56631e5
      * field_declaration_list_item list (* zero or more *)
    )
  | `Prep_elif_in_field_decl_list_65bc06e of (
        pat_bfeb4bb
      * preproc_expression
      * Token.t (* "\n" *)
      * field_declaration_list_item list (* zero or more *)
      * anon_choice_prep_else_in_field_decl_list_1fef6b2 option
    )
  | `Prep_elif_in_field_decl_list_3f47a97 of (
        anon_choice_pat_0307ca2_dbf6a9d
      * identifier (*tok*)
      * field_declaration_list_item list (* zero or more *)
      * anon_choice_prep_else_in_field_decl_list_1fef6b2 option
    )
]

and anon_choice_stmt_id_opt_field_decl_list_9aebd83 = [
    `Id_opt_field_decl_list of (
        identifier (*tok*)
      * field_declaration_list option
    )
  | `Field_decl_list of field_declaration_list
]

and anon_choice_type_qual_b00a56a = [
    `Type_qual of type_qualifier
  | `Static of Token.t (* "static" *)
]

and argument_list = (
    Token.t (* "(" *)
  * (
        anon_choice_exp_f079e30
      * (Token.t (* "," *) * anon_choice_exp_f079e30) list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

and array_declarator = (
    declarator
  * Token.t (* "[" *)
  * anon_choice_type_qual_b00a56a list (* zero or more *)
  * anon_choice_exp_508611b option
  * Token.t (* "]" *)
)

and assignment_left_expression = [
    `Id of identifier (*tok*)
  | `Call_exp of call_expression
  | `Field_exp of field_expression
  | `Poin_exp of pointer_expression
  | `Subs_exp of subscript_expression
  | `Paren_exp of parenthesized_expression
]

and attribute = (
    (identifier (*tok*) * Token.t (* "::" *)) option
  * identifier (*tok*)
  * argument_list option
)

and attribute_declaration = (
    Token.t (* "[[" *)
  * attribute
  * (Token.t (* "," *) * attribute) list (* zero or more *)
  * Token.t (* "]]" *)
)

and attribute_specifier = (
    [
        `X___attr__ of Token.t (* "__attribute__" *)
      | `X___attr of Token.t (* "__attribute" *)
    ]
  * Token.t (* "(" *)
  * argument_list
  * Token.t (* ")" *)
)

and attributed_declarator = (
    declarator
  * attribute_declaration list (* one or more *)
)

and attributed_statement = (
    attribute_declaration list (* one or more *)
  * statement
)

and binary_expression = [
    `Exp_PLUS_exp of (expression * Token.t (* "+" *) * expression)
  | `Exp_DASH_exp of (expression * Token.t (* "-" *) * expression)
  | `Exp_STAR_exp of (expression * Token.t (* "*" *) * expression)
  | `Exp_SLASH_exp of (expression * Token.t (* "/" *) * expression)
  | `Exp_PERC_exp of (expression * Token.t (* "%" *) * expression)
  | `Exp_BARBAR_exp of (expression * Token.t (* "||" *) * expression)
  | `Exp_AMPAMP_exp of (expression * Token.t (* "&&" *) * expression)
  | `Exp_BAR_exp of (expression * Token.t (* "|" *) * expression)
  | `Exp_HAT_exp of (expression * Token.t (* "^" *) * expression)
  | `Exp_AMP_exp of (expression * Token.t (* "&" *) * expression)
  | `Exp_EQEQ_exp of (expression * Token.t (* "==" *) * expression)
  | `Exp_BANGEQ_exp of (expression * Token.t (* "!=" *) * expression)
  | `Exp_GT_exp of (expression * Token.t (* ">" *) * expression)
  | `Exp_GTEQ_exp of (expression * Token.t (* ">=" *) * expression)
  | `Exp_LTEQ_exp of (expression * Token.t (* "<=" *) * expression)
  | `Exp_LT_exp of (expression * Token.t (* "<" *) * expression)
  | `Exp_LTLT_exp of (expression * Token.t (* "<<" *) * expression)
  | `Exp_GTGT_exp of (expression * Token.t (* ">>" *) * expression)
]

and bitfield_clause = (Token.t (* ":" *) * expression)

and block_item = [
    `Func_defi of function_definition
  | `Old_style_func_defi of old_style_function_definition
  | `Link_spec of linkage_specification
  | `Decl of declaration
  | `Stmt of statement
  | `Attr_stmt of attributed_statement
  | `Type_defi of type_definition
  | `Empty_decl of empty_declaration
  | `Prep_if of preproc_if
  | `Prep_ifdef of preproc_ifdef
  | `Prep_incl of preproc_include
  | `Prep_def of preproc_def
  | `Prep_func_def of preproc_function_def
  | `Prep_call of preproc_call
]

and call_expression = (expression * argument_list)

and case_statement = (
    [
        `Case_exp of (Token.t (* "case" *) * expression)
      | `Defa of Token.t (* "default" *)
    ]
  * Token.t (* ":" *)
  * [
        `Choice_attr_stmt of non_case_statement
      | `Decl of declaration
      | `Type_defi of type_definition
    ]
      list (* zero or more *)
)

and comma_expression = (
    expression * Token.t (* "," *) * anon_choice_exp_55b4dba
)

and compound_statement = (
    Token.t (* "{" *)
  * block_item list (* zero or more *)
  * Token.t (* "}" *)
)

and declaration = (
    declaration_specifiers
  * anon_choice_opt_ms_call_modi_decl_decl_opt_gnu_asm_exp_2fa2f9e
  * (
        Token.t (* "," *)
      * anon_choice_opt_ms_call_modi_decl_decl_opt_gnu_asm_exp_2fa2f9e
    )
      list (* zero or more *)
  * Token.t (* ";" *)
)

and declaration_declarator = [
    `Attr_decl of attributed_declarator
  | `Poin_decl of pointer_declarator
  | `Func_decl_decl of (
        declarator
      * parameter_list
      * gnu_asm_expression option
      * attribute_specifier list (* zero or more *)
    )
  | `Array_decl of array_declarator
  | `Paren_decl of parenthesized_declarator
  | `Id of identifier (*tok*)
]

and declaration_list = (
    Token.t (* "{" *)
  * block_item list (* zero or more *)
  * Token.t (* "}" *)
)

and declaration_modifiers = [
    `Stor_class_spec of storage_class_specifier
  | `Type_qual of type_qualifier
  | `Attr_spec of attribute_specifier
  | `Attr_decl of attribute_declaration
  | `Ms_decl_modi of ms_declspec_modifier
]

and declaration_specifiers = (
    declaration_modifiers list (* zero or more *)
  * type_specifier
  * declaration_modifiers list (* zero or more *)
)

and declarator = [
    `Attr_decl of attributed_declarator
  | `Poin_decl of pointer_declarator
  | `Func_decl of (
        declarator
      * parameter_list
      * gnu_asm_expression option
      * [
            `Attr_spec of attribute_specifier
          | `Id of identifier (*tok*)
          | `Prep_call_exp of preproc_call_expression
        ]
          list (* zero or more *)
    )
  | `Array_decl of array_declarator
  | `Paren_decl of parenthesized_declarator
  | `Id of identifier (*tok*)
]

and do_statement = (
    Token.t (* "do" *) * statement * Token.t (* "while" *)
  * parenthesized_expression * Token.t (* ";" *)
)

and else_clause = (Token.t (* "else" *) * statement)

and empty_declaration = (type_specifier * Token.t (* ";" *))

and enumerator = (
    identifier (*tok*)
  * (Token.t (* "=" *) * expression) option
)

and enumerator_list = (
    Token.t (* "{" *)
  * [
        `Enum_COMMA of (enumerator * Token.t (* "," *))
      | `Prep_if_in_enum_list of preproc_if_in_enumerator_list
      | `Prep_ifdef_in_enum_list of preproc_ifdef_in_enumerator_list
      | `Prep_call_COMMA of (preproc_call * Token.t (* "," *))
    ]
      list (* zero or more *)
  * [
        `Enum of enumerator
      | `Prep_if_in_enum_list_no_comma of
          preproc_if_in_enumerator_list_no_comma
      | `Prep_ifdef_in_enum_list_no_comma of
          preproc_ifdef_in_enumerator_list_no_comma
      | `Prep_call of preproc_call
    ]
      option
  * Token.t (* "}" *)
)

and expression = [
    `Choice_cond_exp of expression_not_binary
  | `Bin_exp of binary_expression
]

and expression_not_binary = [
    `Cond_exp of (
        expression
      * Token.t (* "?" *)
      * anon_choice_exp_55b4dba option
      * Token.t (* ":" *)
      * expression
    )
  | `Assign_exp of (
        assignment_left_expression
      * [
            `EQ of Token.t (* "=" *)
          | `STAREQ of Token.t (* "*=" *)
          | `SLASHEQ of Token.t (* "/=" *)
          | `PERCEQ of Token.t (* "%=" *)
          | `PLUSEQ of Token.t (* "+=" *)
          | `DASHEQ of Token.t (* "-=" *)
          | `LTLTEQ of Token.t (* "<<=" *)
          | `GTGTEQ of Token.t (* ">>=" *)
          | `AMPEQ of Token.t (* "&=" *)
          | `HATEQ of Token.t (* "^=" *)
          | `BAREQ of Token.t (* "|=" *)
        ]
      * expression
    )
  | `Un_exp of (anon_choice_BANG_67174d6 * expression)
  | `Update_exp of update_expression
  | `Cast_exp of (
        Token.t (* "(" *) * type_descriptor * Token.t (* ")" *) * expression
    )
  | `Poin_exp of pointer_expression
  | `Sizeof_exp of (
        Token.t (* "sizeof" *)
      * [
            `Exp of expression
          | `LPAR_type_desc_RPAR of (
                Token.t (* "(" *) * type_descriptor * Token.t (* ")" *)
            )
        ]
    )
  | `Alig_exp of (
        [
            `X___alig__ of Token.t (* "__alignof__" *)
          | `X___alig of Token.t (* "__alignof" *)
          | `X__alig of Token.t (* "_alignof" *)
          | `Alig of Token.t (* "alignof" *)
          | `X__Alig of Token.t (* "_Alignof" *)
        ]
      * Token.t (* "(" *)
      * type_descriptor
      * Token.t (* ")" *)
    )
  | `Offs_exp of (
        Token.t (* "offsetof" *) * Token.t (* "(" *) * type_descriptor
      * Token.t (* "," *) * identifier (*tok*) * Token.t (* ")" *)
    )
  | `Gene_exp of (
        Token.t (* "_Generic" *)
      * Token.t (* "(" *)
      * expression
      * Token.t (* "," *)
      * type_descriptor
      * Token.t (* ":" *)
      * expression
      * (
            Token.t (* "," *) * type_descriptor * Token.t (* ":" *)
          * expression
        )
          list (* zero or more *)
      * Token.t (* ")" *)
    )
  | `Subs_exp of subscript_expression
  | `Call_exp of call_expression
  | `Field_exp of field_expression
  | `Comp_lit_exp of (
        Token.t (* "(" *) * type_descriptor * Token.t (* ")" *)
      * initializer_list
    )
  | `Id of identifier (*tok*)
  | `Num_lit of number_literal (*tok*)
  | `Str of string_
  | `True of true_ (*tok*)
  | `False of false_ (*tok*)
  | `Null of null
  | `Char_lit of char_literal
  | `Paren_exp of parenthesized_expression
  | `Gnu_asm_exp of gnu_asm_expression
  | `Exte_exp of (Token.t (* "__extension__" *) * expression)
]

and expression_statement = (
    anon_choice_exp_55b4dba option
  * Token.t (* ";" *)
)

and field_declaration_declarator = (
    field_declarator
  * bitfield_clause option
  * (Token.t (* "," *) * field_declarator * bitfield_clause option)
      list (* zero or more *)
)

and field_declaration_list = (
    Token.t (* "{" *)
  * field_declaration_list_item list (* zero or more *)
  * Token.t (* "}" *)
)

and field_declaration_list_item = [
    `Field_decl of (
        declaration_specifiers
      * field_declaration_declarator option
      * attribute_specifier option
      * Token.t (* ";" *)
    )
  | `Prep_def of preproc_def
  | `Prep_func_def of preproc_function_def
  | `Prep_call of preproc_call
  | `Prep_if_in_field_decl_list of (
        pat_3df6e71
      * preproc_expression
      * Token.t (* "\n" *)
      * field_declaration_list_item list (* zero or more *)
      * anon_choice_prep_else_in_field_decl_list_1fef6b2 option
      * pat_c46d1b2
    )
  | `Prep_ifdef_in_field_decl_list of (
        anon_choice_pat_25b90ba_4a37f8c
      * identifier (*tok*)
      * field_declaration_list_item list (* zero or more *)
      * anon_choice_prep_else_in_field_decl_list_1fef6b2 option
      * pat_c46d1b2
    )
]

and field_declarator = [
    `Attr_field_decl of (
        field_declarator
      * attribute_declaration list (* one or more *)
    )
  | `Poin_field_decl of (
        ms_based_modifier option
      * Token.t (* "*" *)
      * ms_pointer_modifier list (* zero or more *)
      * type_qualifier list (* zero or more *)
      * field_declarator
    )
  | `Func_field_decl of (field_declarator * parameter_list)
  | `Array_field_decl of (
        field_declarator
      * Token.t (* "[" *)
      * anon_choice_type_qual_b00a56a list (* zero or more *)
      * anon_choice_exp_508611b option
      * Token.t (* "]" *)
    )
  | `Paren_field_decl of (
        Token.t (* "(" *)
      * ms_call_modifier option
      * field_declarator
      * Token.t (* ")" *)
    )
  | `Id of identifier (*tok*)
]

and field_expression = (
    expression
  * [ `DOT of Token.t (* "." *) | `DASHGT of Token.t (* "->" *) ]
  * identifier (*tok*)
)

and for_statement = (
    Token.t (* "for" *) * Token.t (* "(" *) * for_statement_body
  * Token.t (* ")" *) * statement
)

and for_statement_body = (
    [ `Decl of declaration | `Opt_choice_exp_SEMI of expression_statement ]
  * anon_choice_exp_55b4dba option
  * Token.t (* ";" *)
  * anon_choice_exp_55b4dba option
)

and function_definition = (
    ms_call_modifier option
  * declaration_specifiers
  * ms_call_modifier option
  * declarator
  * compound_statement
)

and gnu_asm_expression = (
    [
        `Asm of Token.t (* "asm" *)
      | `X___asm__ of Token.t (* "__asm__" *)
      | `X___asm of Token.t (* "__asm" *)
    ]
  * gnu_asm_qualifier list (* zero or more *)
  * Token.t (* "(" *)
  * string_
  * (
        gnu_asm_output_operand_list
      * (
            gnu_asm_input_operand_list
          * (gnu_asm_clobber_list * gnu_asm_goto_list option) option
        )
          option
    )
      option
  * Token.t (* ")" *)
)

and gnu_asm_input_operand = (
    (Token.t (* "[" *) * identifier (*tok*) * Token.t (* "]" *)) option
  * string_literal
  * Token.t (* "(" *)
  * expression
  * Token.t (* ")" *)
)

and gnu_asm_input_operand_list = (
    Token.t (* ":" *)
  * (
        gnu_asm_input_operand
      * (Token.t (* "," *) * gnu_asm_input_operand) list (* zero or more *)
    )
      option
)

and gnu_asm_output_operand = (
    (Token.t (* "[" *) * identifier (*tok*) * Token.t (* "]" *)) option
  * string_literal
  * Token.t (* "(" *)
  * expression
  * Token.t (* ")" *)
)

and gnu_asm_output_operand_list = (
    Token.t (* ":" *)
  * (
        gnu_asm_output_operand
      * (Token.t (* "," *) * gnu_asm_output_operand) list (* zero or more *)
    )
      option
)

and if_statement = (
    Token.t (* "if" *)
  * parenthesized_expression
  * statement
  * else_clause option
)

and initializer_list = (
    Token.t (* "{" *)
  * (
        anon_choice_init_pair_1a6981e
      * (Token.t (* "," *) * anon_choice_init_pair_1a6981e)
          list (* zero or more *)
    )
      option
  * Token.t (* "," *) option
  * Token.t (* "}" *)
)

and initializer_pair = [
    `Rep1_choice_subs_desi_EQ_choice_exp of (
        [
            `Subs_desi of subscript_designator
          | `Field_desi of field_designator
          | `Subs_range_desi of subscript_range_designator
        ]
          list (* one or more *)
      * Token.t (* "=" *)
      * anon_choice_exp_3078596
    )
  | `Id_COLON_choice_exp of (
        identifier (*tok*) * Token.t (* ":" *) * anon_choice_exp_3078596
    )
]

and labeled_statement = (
    identifier (*tok*)
  * Token.t (* ":" *)
  * [ `Decl of declaration | `Stmt of statement ]
)

and linkage_specification = (
    Token.t (* "extern" *)
  * string_literal
  * [
        `Func_defi of function_definition
      | `Decl of declaration
      | `Decl_list of declaration_list
    ]
)

and ms_based_modifier = (Token.t (* "__based" *) * argument_list)

and non_case_statement = [
    `Attr_stmt of attributed_statement
  | `Labe_stmt of labeled_statement
  | `Comp_stmt of compound_statement
  | `Exp_stmt of expression_statement
  | `If_stmt of if_statement
  | `Switch_stmt of switch_statement
  | `Do_stmt of do_statement
  | `While_stmt of while_statement
  | `For_stmt of for_statement
  | `Ret_stmt of return_statement
  | `Brk_stmt of break_statement
  | `Cont_stmt of continue_statement
  | `Goto_stmt of goto_statement
  | `Seh_try_stmt of (
        Token.t (* "__try" *)
      * compound_statement
      * [
            `Seh_except_clause of seh_except_clause
          | `Seh_fina_clause of seh_finally_clause
        ]
    )
  | `Seh_leave_stmt of (Token.t (* "__leave" *) * Token.t (* ";" *))
]

and old_style_function_declarator = (declarator * old_style_parameter_list)

and old_style_function_definition = (
    ms_call_modifier option
  * declaration_specifiers
  * old_style_function_declarator
  * declaration list (* one or more *)
  * compound_statement
)

and parameter_list = (
    Token.t (* "(" *)
  * [
        `Opt_choice_param_decl_rep_COMMA_choice_param_decl of
          (
              anon_choice_param_decl_4ac2852
            * (Token.t (* "," *) * anon_choice_param_decl_4ac2852)
                list (* zero or more *)
          )
            option
      | `Comp_stmt of compound_statement
    ]
  * Token.t (* ")" *)
)

and parenthesized_declarator = (
    Token.t (* "(" *)
  * ms_call_modifier option
  * declarator
  * Token.t (* ")" *)
)

and parenthesized_expression = (
    Token.t (* "(" *)
  * [
        `Exp of expression
      | `Comma_exp of comma_expression
      | `Comp_stmt of compound_statement
    ]
  * Token.t (* ")" *)
)

and pointer_declarator = (
    ms_based_modifier option
  * Token.t (* "*" *)
  * ms_pointer_modifier list (* zero or more *)
  * type_qualifier list (* zero or more *)
  * declarator
)

and pointer_expression = (
    [ `STAR of Token.t (* "*" *) | `AMP of Token.t (* "&" *) ]
  * expression
)

and preproc_if = (
    pat_3df6e71
  * preproc_expression
  * Token.t (* "\n" *)
  * block_item list (* zero or more *)
  * anon_choice_prep_else_6b6e391 option
  * pat_c46d1b2
)

and preproc_if_in_enumerator_list = (
    pat_3df6e71
  * preproc_expression
  * Token.t (* "\n" *)
  * (enumerator * Token.t (* "," *)) list (* zero or more *)
  * anon_choice_prep_else_in_enum_list_a31466c option
  * pat_c46d1b2
)

and preproc_if_in_enumerator_list_no_comma = (
    pat_3df6e71
  * preproc_expression
  * Token.t (* "\n" *)
  * enumerator list (* zero or more *)
  * anon_choice_prep_else_in_enum_list_no_comma_aaec454 option
  * pat_c46d1b2
)

and preproc_ifdef = (
    anon_choice_pat_25b90ba_4a37f8c
  * identifier (*tok*)
  * block_item list (* zero or more *)
  * anon_choice_prep_else_6b6e391 option
  * pat_c46d1b2
)

and preproc_ifdef_in_enumerator_list = (
    anon_choice_pat_25b90ba_4a37f8c
  * identifier (*tok*)
  * (enumerator * Token.t (* "," *)) list (* zero or more *)
  * anon_choice_prep_else_in_enum_list_a31466c option
  * pat_c46d1b2
)

and preproc_ifdef_in_enumerator_list_no_comma = (
    anon_choice_pat_25b90ba_4a37f8c
  * identifier (*tok*)
  * enumerator list (* zero or more *)
  * anon_choice_prep_else_in_enum_list_no_comma_aaec454 option
  * pat_c46d1b2
)

and return_statement = (
    Token.t (* "return" *)
  * anon_choice_exp_55b4dba option
  * Token.t (* ";" *)
)

and seh_except_clause = (
    Token.t (* "__except" *) * parenthesized_expression * compound_statement
)

and seh_finally_clause = (Token.t (* "__finally" *) * compound_statement)

and sized_type_specifier = [
    `Rep_choice_signed_opt_choice_id_rep1_choice_signed of (
        anon_choice_signed_a0bfc19 list (* zero or more *)
      * anon_choice_stmt_id_1a79fc3 option
      * anon_choice_signed_a0bfc19 list (* one or more *)
    )
  | `Rep1_choice_signed_rep_type_qual_opt_choice_id_rep_choice_signed of (
        anon_choice_signed_a0bfc19 list (* one or more *)
      * type_qualifier list (* zero or more *)
      * anon_choice_stmt_id_1a79fc3 option
      * anon_choice_signed_a0bfc19 list (* zero or more *)
    )
]

and statement = [
    `Case_stmt of case_statement
  | `Choice_attr_stmt of non_case_statement
]

and subscript_designator = (
    Token.t (* "[" *) * expression * Token.t (* "]" *)
)

and subscript_expression = (
    expression * Token.t (* "[" *) * expression * Token.t (* "]" *)
)

and subscript_range_designator = (
    Token.t (* "[" *) * expression * Token.t (* "..." *) * expression
  * Token.t (* "]" *)
)

and switch_statement = (
    Token.t (* "switch" *) * parenthesized_expression * compound_statement
)

and type_declarator = [
    `Attr_type_decl of (
        type_declarator
      * attribute_declaration list (* one or more *)
    )
  | `Poin_type_decl of (
        ms_based_modifier option
      * Token.t (* "*" *)
      * ms_pointer_modifier list (* zero or more *)
      * type_qualifier list (* zero or more *)
      * type_declarator
    )
  | `Func_type_decl of (type_declarator * parameter_list)
  | `Array_type_decl of (
        type_declarator
      * Token.t (* "[" *)
      * anon_choice_type_qual_b00a56a list (* zero or more *)
      * anon_choice_exp_508611b option
      * Token.t (* "]" *)
    )
  | `Paren_type_decl of (
        Token.t (* "(" *)
      * ms_call_modifier option
      * type_declarator
      * Token.t (* ")" *)
    )
  | `Id of identifier (*tok*)
  | `Choice_signed of anon_choice_signed_a0bfc19
  | `Prim_type of primitive_type (*tok*)
]

and type_definition = (
    Token.t (* "__extension__" *) option
  * Token.t (* "typedef" *)
  * type_definition_type
  * type_definition_declarators
  * attribute_specifier list (* zero or more *)
  * Token.t (* ";" *)
)

and type_definition_declarators = (
    type_declarator
  * (Token.t (* "," *) * type_declarator) list (* zero or more *)
)

and type_definition_type = (
    type_qualifier list (* zero or more *)
  * type_specifier
  * type_qualifier list (* zero or more *)
)

and type_descriptor = (
    type_qualifier list (* zero or more *)
  * type_specifier
  * type_qualifier list (* zero or more *)
  * abstract_declarator option
)

and type_qualifier = [
    `Const of Token.t (* "const" *)
  | `Cons of Token.t (* "constexpr" *)
  | `Vola of Token.t (* "volatile" *)
  | `Rest of Token.t (* "restrict" *)
  | `X___rest__ of Token.t (* "__restrict__" *)
  | `X___exte__ of Token.t (* "__extension__" *)
  | `X__Atomic of Token.t (* "_Atomic" *)
  | `X__Nore of Token.t (* "_Noreturn" *)
  | `Nore of Token.t (* "noreturn" *)
  | `X__Nonn of Token.t (* "_Nonnull" *)
  | `Alignas_qual of (
        [
            `Alignas of Token.t (* "alignas" *)
          | `X__Alignas of Token.t (* "_Alignas" *)
        ]
      * Token.t (* "(" *)
      * [ `Exp of expression | `Type_desc of type_descriptor ]
      * Token.t (* ")" *)
    )
]

and type_specifier = [
    `Struct_spec of (
        Token.t (* "struct" *)
      * attribute_specifier option
      * ms_declspec_modifier option
      * anon_choice_stmt_id_opt_field_decl_list_9aebd83
      * attribute_specifier option
    )
  | `Union_spec of (
        Token.t (* "union" *)
      * ms_declspec_modifier option
      * anon_choice_stmt_id_opt_field_decl_list_9aebd83
      * attribute_specifier option
    )
  | `Enum_spec of (
        Token.t (* "enum" *)
      * [
            `Id_opt_COLON_prim_type_opt_enum_list of (
                identifier (*tok*)
              * (Token.t (* ":" *) * primitive_type (*tok*)) option
              * enumerator_list option
            )
          | `Enum_list of enumerator_list
        ]
      * attribute_specifier option
    )
  | `Macro_type_spec of (
        identifier (*tok*) * Token.t (* "(" *) * type_descriptor
      * Token.t (* ")" *)
    )
  | `Sized_type_spec of sized_type_specifier
  | `Prim_type of primitive_type (*tok*)
  | `Id of identifier (*tok*)
]

and update_expression = [
    `Choice_DASHDASH_exp of (anon_choice_DASHDASH_d11def2 * expression)
  | `Exp_choice_DASHDASH of (expression * anon_choice_DASHDASH_d11def2)
]

and while_statement = (
    Token.t (* "while" *) * parenthesized_expression * statement
)

type top_level_statement = [
    `Case_stmt of case_statement
  | `Attr_stmt of attributed_statement
  | `Labe_stmt of labeled_statement
  | `Comp_stmt of compound_statement
  | `Top_level_exp_stmt of (expression_not_binary option * Token.t (* ";" *))
  | `If_stmt of if_statement
  | `Switch_stmt of switch_statement
  | `Do_stmt of do_statement
  | `While_stmt of while_statement
  | `For_stmt of for_statement
  | `Ret_stmt of return_statement
  | `Brk_stmt of break_statement
  | `Cont_stmt of continue_statement
  | `Goto_stmt of goto_statement
]

type top_level_item = [
    `Func_defi of function_definition
  | `Old_style_func_defi of old_style_function_definition
  | `Link_spec of linkage_specification
  | `Decl of declaration
  | `Top_level_stmt of top_level_statement
  | `Attr_stmt of attributed_statement
  | `Type_defi of type_definition
  | `Empty_decl of empty_declaration
  | `Prep_if of preproc_if
  | `Prep_ifdef of preproc_ifdef
  | `Prep_incl of preproc_include
  | `Prep_def of preproc_def
  | `Prep_func_def of preproc_function_def
  | `Prep_call of preproc_call
]

type translation_unit = top_level_item list (* zero or more *)

type ms_restrict_modifier (* inlined *) = Token.t (* "__restrict" *)

type ms_signed_ptr_modifier (* inlined *) = Token.t (* "__sptr" *)

type variadic_parameter (* inlined *) = Token.t (* "..." *)

type seh_leave_statement (* inlined *) = (
    Token.t (* "__leave" *) * Token.t (* ";" *)
)

type comment (* inlined *) = Token.t

type ms_unsigned_ptr_modifier (* inlined *) = Token.t (* "__uptr" *)

type type_identifier (* inlined *) = identifier (*tok*)

type field_identifier (* inlined *) = identifier (*tok*)

type statement_identifier (* inlined *) = identifier (*tok*)

type concatenated_string (* inlined *) = (
    [
        `Id_str_lit of (identifier (*tok*) * string_literal)
      | `Str_lit_str_lit of (string_literal * string_literal)
      | `Str_lit_id of (string_literal * identifier (*tok*))
    ]
  * [ `Str_lit of string_literal | `Id of identifier (*tok*) ]
      list (* zero or more *)
)

type preproc_parenthesized_expression (* inlined *) = (
    Token.t (* "(" *) * preproc_expression * Token.t (* ")" *)
)

type preproc_unary_expression (* inlined *) = (
    anon_choice_BANG_67174d6 * preproc_expression
)

type abstract_array_declarator (* inlined *) = (
    abstract_declarator option
  * Token.t (* "[" *)
  * anon_choice_type_qual_b00a56a list (* zero or more *)
  * anon_choice_exp_508611b option
  * Token.t (* "]" *)
)

type abstract_function_declarator (* inlined *) = (
    abstract_declarator option
  * parameter_list
)

type abstract_parenthesized_declarator (* inlined *) = (
    Token.t (* "(" *)
  * ms_call_modifier option
  * abstract_declarator
  * Token.t (* ")" *)
)

type abstract_pointer_declarator (* inlined *) = (
    Token.t (* "*" *)
  * ms_pointer_modifier list (* zero or more *)
  * type_qualifier list (* zero or more *)
  * abstract_declarator option
)

type alignas_qualifier (* inlined *) = (
    [
        `Alignas of Token.t (* "alignas" *)
      | `X__Alignas of Token.t (* "_Alignas" *)
    ]
  * Token.t (* "(" *)
  * [ `Exp of expression | `Type_desc of type_descriptor ]
  * Token.t (* ")" *)
)

type alignof_expression (* inlined *) = (
    [
        `X___alig__ of Token.t (* "__alignof__" *)
      | `X___alig of Token.t (* "__alignof" *)
      | `X__alig of Token.t (* "_alignof" *)
      | `Alig of Token.t (* "alignof" *)
      | `X__Alig of Token.t (* "_Alignof" *)
    ]
  * Token.t (* "(" *)
  * type_descriptor
  * Token.t (* ")" *)
)

type anon_opt_ms_call_modi_decl_decl_opt_gnu_asm_exp_ea3dc2e (* inlined *) = (
    ms_call_modifier option
  * declaration_declarator
  * gnu_asm_expression option
)

type array_field_declarator (* inlined *) = (
    field_declarator
  * Token.t (* "[" *)
  * anon_choice_type_qual_b00a56a list (* zero or more *)
  * anon_choice_exp_508611b option
  * Token.t (* "]" *)
)

type array_type_declarator (* inlined *) = (
    type_declarator
  * Token.t (* "[" *)
  * anon_choice_type_qual_b00a56a list (* zero or more *)
  * anon_choice_exp_508611b option
  * Token.t (* "]" *)
)

type assignment_expression (* inlined *) = (
    assignment_left_expression
  * [
        `EQ of Token.t (* "=" *)
      | `STAREQ of Token.t (* "*=" *)
      | `SLASHEQ of Token.t (* "/=" *)
      | `PERCEQ of Token.t (* "%=" *)
      | `PLUSEQ of Token.t (* "+=" *)
      | `DASHEQ of Token.t (* "-=" *)
      | `LTLTEQ of Token.t (* "<<=" *)
      | `GTGTEQ of Token.t (* ">>=" *)
      | `AMPEQ of Token.t (* "&=" *)
      | `HATEQ of Token.t (* "^=" *)
      | `BAREQ of Token.t (* "|=" *)
    ]
  * expression
)

type attributed_field_declarator (* inlined *) = (
    field_declarator
  * attribute_declaration list (* one or more *)
)

type attributed_type_declarator (* inlined *) = (
    type_declarator
  * attribute_declaration list (* one or more *)
)

type cast_expression (* inlined *) = (
    Token.t (* "(" *) * type_descriptor * Token.t (* ")" *) * expression
)

type compound_literal_expression (* inlined *) = (
    Token.t (* "(" *) * type_descriptor * Token.t (* ")" *)
  * initializer_list
)

type conditional_expression (* inlined *) = (
    expression
  * Token.t (* "?" *)
  * anon_choice_exp_55b4dba option
  * Token.t (* ":" *)
  * expression
)

type enum_specifier (* inlined *) = (
    Token.t (* "enum" *)
  * [
        `Id_opt_COLON_prim_type_opt_enum_list of (
            identifier (*tok*)
          * (Token.t (* ":" *) * primitive_type (*tok*)) option
          * enumerator_list option
        )
      | `Enum_list of enumerator_list
    ]
  * attribute_specifier option
)

type extension_expression (* inlined *) = (
    Token.t (* "__extension__" *) * expression
)

type field_declaration (* inlined *) = (
    declaration_specifiers
  * field_declaration_declarator option
  * attribute_specifier option
  * Token.t (* ";" *)
)

type function_declaration_declarator (* inlined *) = (
    declarator
  * parameter_list
  * gnu_asm_expression option
  * attribute_specifier list (* zero or more *)
)

type function_declarator (* inlined *) = (
    declarator
  * parameter_list
  * gnu_asm_expression option
  * [
        `Attr_spec of attribute_specifier
      | `Id of identifier (*tok*)
      | `Prep_call_exp of preproc_call_expression
    ]
      list (* zero or more *)
)

type function_field_declarator (* inlined *) = (
    field_declarator * parameter_list
)

type function_type_declarator (* inlined *) = (
    type_declarator * parameter_list
)

type generic_expression (* inlined *) = (
    Token.t (* "_Generic" *)
  * Token.t (* "(" *)
  * expression
  * Token.t (* "," *)
  * type_descriptor
  * Token.t (* ":" *)
  * expression
  * (Token.t (* "," *) * type_descriptor * Token.t (* ":" *) * expression)
      list (* zero or more *)
  * Token.t (* ")" *)
)

type init_declarator (* inlined *) = (
    declarator
  * Token.t (* "=" *)
  * [ `Init_list of initializer_list | `Exp of expression ]
)

type macro_type_specifier (* inlined *) = (
    identifier (*tok*) * Token.t (* "(" *) * type_descriptor
  * Token.t (* ")" *)
)

type offsetof_expression (* inlined *) = (
    Token.t (* "offsetof" *) * Token.t (* "(" *) * type_descriptor
  * Token.t (* "," *) * identifier (*tok*) * Token.t (* ")" *)
)

type parameter_declaration (* inlined *) = (
    declaration_specifiers
  * [ `Decl of declarator | `Abst_decl of abstract_declarator ] option
  * attribute_specifier list (* zero or more *)
)

type parenthesized_field_declarator (* inlined *) = (
    Token.t (* "(" *)
  * ms_call_modifier option
  * field_declarator
  * Token.t (* ")" *)
)

type parenthesized_type_declarator (* inlined *) = (
    Token.t (* "(" *)
  * ms_call_modifier option
  * type_declarator
  * Token.t (* ")" *)
)

type pointer_field_declarator (* inlined *) = (
    ms_based_modifier option
  * Token.t (* "*" *)
  * ms_pointer_modifier list (* zero or more *)
  * type_qualifier list (* zero or more *)
  * field_declarator
)

type pointer_type_declarator (* inlined *) = (
    ms_based_modifier option
  * Token.t (* "*" *)
  * ms_pointer_modifier list (* zero or more *)
  * type_qualifier list (* zero or more *)
  * type_declarator
)

type preproc_elif (* inlined *) = (
    pat_bfeb4bb
  * preproc_expression
  * Token.t (* "\n" *)
  * block_item list (* zero or more *)
  * anon_choice_prep_else_6b6e391 option
)

type preproc_elif_in_enumerator_list (* inlined *) = (
    pat_bfeb4bb
  * preproc_expression
  * Token.t (* "\n" *)
  * (enumerator * Token.t (* "," *)) list (* zero or more *)
  * anon_choice_prep_else_in_enum_list_a31466c option
)

type preproc_elif_in_enumerator_list_no_comma (* inlined *) = (
    pat_bfeb4bb
  * preproc_expression
  * Token.t (* "\n" *)
  * enumerator list (* zero or more *)
  * anon_choice_prep_else_in_enum_list_no_comma_aaec454 option
)

type preproc_elif_in_field_declaration_list (* inlined *) = (
    pat_bfeb4bb
  * preproc_expression
  * Token.t (* "\n" *)
  * field_declaration_list_item list (* zero or more *)
  * anon_choice_prep_else_in_field_decl_list_1fef6b2 option
)

type preproc_elifdef (* inlined *) = (
    anon_choice_pat_0307ca2_dbf6a9d
  * identifier (*tok*)
  * block_item list (* zero or more *)
  * anon_choice_prep_else_6b6e391 option
)

type preproc_elifdef_in_enumerator_list (* inlined *) = (
    anon_choice_pat_0307ca2_dbf6a9d
  * identifier (*tok*)
  * (enumerator * Token.t (* "," *)) list (* zero or more *)
  * anon_choice_prep_else_in_enum_list_a31466c option
)

type preproc_elifdef_in_enumerator_list_no_comma (* inlined *) = (
    anon_choice_pat_0307ca2_dbf6a9d
  * identifier (*tok*)
  * enumerator list (* zero or more *)
  * anon_choice_prep_else_in_enum_list_no_comma_aaec454 option
)

type preproc_elifdef_in_field_declaration_list (* inlined *) = (
    anon_choice_pat_0307ca2_dbf6a9d
  * identifier (*tok*)
  * field_declaration_list_item list (* zero or more *)
  * anon_choice_prep_else_in_field_decl_list_1fef6b2 option
)

type preproc_else (* inlined *) = (
    pat_56631e5
  * block_item list (* zero or more *)
)

type preproc_else_in_enumerator_list (* inlined *) = (
    pat_56631e5
  * (enumerator * Token.t (* "," *)) list (* zero or more *)
)

type preproc_else_in_enumerator_list_no_comma (* inlined *) = (
    pat_56631e5
  * enumerator list (* zero or more *)
)

type preproc_else_in_field_declaration_list (* inlined *) = (
    pat_56631e5
  * field_declaration_list_item list (* zero or more *)
)

type preproc_if_in_field_declaration_list (* inlined *) = (
    pat_3df6e71
  * preproc_expression
  * Token.t (* "\n" *)
  * field_declaration_list_item list (* zero or more *)
  * anon_choice_prep_else_in_field_decl_list_1fef6b2 option
  * pat_c46d1b2
)

type preproc_ifdef_in_field_declaration_list (* inlined *) = (
    anon_choice_pat_25b90ba_4a37f8c
  * identifier (*tok*)
  * field_declaration_list_item list (* zero or more *)
  * anon_choice_prep_else_in_field_decl_list_1fef6b2 option
  * pat_c46d1b2
)

type seh_try_statement (* inlined *) = (
    Token.t (* "__try" *)
  * compound_statement
  * [
        `Seh_except_clause of seh_except_clause
      | `Seh_fina_clause of seh_finally_clause
    ]
)

type sizeof_expression (* inlined *) = (
    Token.t (* "sizeof" *)
  * [
        `Exp of expression
      | `LPAR_type_desc_RPAR of (
            Token.t (* "(" *) * type_descriptor * Token.t (* ")" *)
        )
    ]
)

type struct_specifier (* inlined *) = (
    Token.t (* "struct" *)
  * attribute_specifier option
  * ms_declspec_modifier option
  * anon_choice_stmt_id_opt_field_decl_list_9aebd83
  * attribute_specifier option
)

type unary_expression (* inlined *) = (anon_choice_BANG_67174d6 * expression)

type union_specifier (* inlined *) = (
    Token.t (* "union" *)
  * ms_declspec_modifier option
  * anon_choice_stmt_id_opt_field_decl_list_9aebd83
  * attribute_specifier option
)

type top_level_expression_statement (* inlined *) = (
    expression_not_binary option
  * Token.t (* ";" *)
)

type extra = [ `Comment of Loc.t * comment ]

type extras = extra list
